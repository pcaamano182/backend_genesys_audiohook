<!DOCTYPE html>
<html>

<head>
  <base href="/" />
  <title>Agent Assist UI Modules</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css?family=Roboto:medium" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css?family=Google+Sans:medium" rel="stylesheet" />
  <link rel="stylesheet" href="../public/css/styles.css" type="text/css">
  <!-- WebComponents polyfill. Needed for rendering web components in older browsers. -->
  <script src="https://www.gstatic.com/external_hosted/document_register_element/document-register-element.js"></script>
  <!-- Genesys Cloud Platform Client SDK -->
  <script src="https://sdk-cdn.mypurecloud.com/javascript/latest/purecloud-platform-client-v2.min.js"></script>
  <!-- Core UI module container. Loads all UI module-specific scripts. -->
  <script src="https://www.gstatic.com/agent-assist-ui-modules/v1.8/common.js"></script>
  <script src="https://www.gstatic.com/agent-assist-ui-modules/v1.3/transcript.js"></script>
  <script src="https://www.gstatic.com/agent-assist-ui-modules/v2.0/container.js"></script>

</head>
<body>
  <div class="app-container">
    <div class="transcript-container"></div>
    <div class="ui-modules-wrapper">
      <div class="ui-modules-container"> </div>
    </div>
  </div>
  <script>

    // window._uiModuleFlags = { debug: true }
    window.addEventListener('load', function () {

      const UI_MODULES_EL_SELECTOR = 'agent-assist-ui-modules-v2';
      const TRANSCRIPT_SELECTOR = 'agent-assist-transcript';
      const proxyServer = '<%= proxyServer %>';
      const conversationProfile = '<%= conversationProfile %>';
      const features = '<%= features %>';
      const genesysCloudRegion = '<%= genesysCloudRegion %>';
      const clientId = '<%= clientID %>';
      const channel = '<%= channel %>';
      var applicationServer = '<%= applicationServer %>';
      var accessToken = '';
      const urlParams = new URLSearchParams(window.location.search);
      const currentConversationId = urlParams.get('conversationid');
      const gcHostOrigin = urlParams.get('gcHostOrigin');
      const gcTargetEnv = urlParams.get('gcTargetEnv') || genesysCloudRegion;
      applicationServer = applicationServer.replace(/\/$/, "");
      var firstTimeLoad = false;
      const redirectUri = `${applicationServer}?conversationProfile=${conversationProfile}&features=${features}&gcTargetEnv=${encodeURIComponent(gcTargetEnv)}`;
      var existingUiModulesEl = document.querySelector(UI_MODULES_EL_SELECTOR);
      const appContainer = document.querySelector('.app-container');
      const uiModulesContainer = document.querySelector('.ui-modules-container');
      const transcriptContainer = document.querySelector('.transcript-container');
      var connector;

      function createTranscriptUIElement() {
        const uiModulesTranscriptEl = document.createElement(TRANSCRIPT_SELECTOR);
        uiModulesTranscriptEl.style.maxHeight = '100%';
        transcriptContainer.appendChild(uiModulesTranscriptEl);
      }

      function createUIElement(accessToken) {
        if (existingUiModulesEl) {
          connector.setAuthToken(accessToken);
          connector.initGenesysCloudConnectorSubscription();
        } else {
          var uiModulesEl = document.createElement(UI_MODULES_EL_SELECTOR);
          uiModulesEl.setAttribute('features', features);
          uiModulesEl.config = getKnowledgeAssistConfig();
          uiModulesContainer.appendChild(uiModulesEl);

          initConnect();
        }
      }

      /* Make a V2 Connection */
      function initConnect() {
        connector = new UiModulesConnector();

        const config = {
          channel: channel,
          agentDesktop: 'Custom',
          conversationProfileName: conversationProfile,
          apiConfig: {
            authToken: accessToken,
            customApiEndpoint: proxyServer,
          },
          useCustomConversationId: true,
          eventBasedConfig: {
            notifierServerEndpoint: proxyServer,
            library: 'SocketIo'
          }
        }

        if (channel !== 'voice') {
          transcriptContainer.style.display = 'none';
        }

        connector.init(config);
      }

      function getKnowledgeAssistConfig() {
        return {
          knowledgeAssistConfig: {
            articleLinkConfig: {
              target: 'popup',
              popupWindowOptions: 'height=800,width=600,left=600,top=100',
            }
          }
        };
      }

      /** Manual Genesys OAuth login */
      async function loginWithGenesys() {
        const client = window.platformClient.ApiClient.instance;
        client.setEnvironment(genesysCloudRegion);

        try {
          await client.loginImplicitGrant(clientId, redirectUri, { state: 'custom-state' });
          const genesysAccessToken = client.authentications['PureCloud OAuth'].accessToken;

          const res = await fetch(proxyServer + '/register', {
            method: 'POST',
            headers: [['Authorization', genesysAccessToken]],
          });

          if (res.status === 200) {
            const body = await res.json();
            accessToken = body.token;
            createUIElement(accessToken);
            if (channel === 'voice') {
              createTranscriptUIElement();
            }
          }
        } catch (error) {
          console.error('Login failed:', error);
        }
      }

      /** Check if we have token in URL hash (OAuth redirect) */
      if (window.location.hash.includes('access_token')) {
        loginWithGenesys();
      } else if (!existingUiModulesEl && !accessToken) {
        // Show login prompt or auto-login
        loginWithGenesys();
      }

      addAgentAssistEventListener('smart-reply-selected', function (event) {
        navigator.clipboard.writeText(event.detail.answer.reply);
      });

      addAgentAssistEventListener('agent-coaching-response-selected', function (event) {
        navigator.clipboard.writeText(event.detail.selectedResponse);
      });
    });
  </script>
</body>

</html>